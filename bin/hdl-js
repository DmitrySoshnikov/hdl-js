#!/usr/bin/env node

'use strict';

const colors = require('colors');
const fs = require('fs');
const hdl = require('..');
const path = require('path');

function enforceUnique(v) {
  return Array.isArray(v) ? v[v.length - 1] : v;
}

const options = require('yargs')
  .usage('Usage: $0 [options]')
  .options({
    file: {
      alias: 'f',
      describe: 'An HDL file containing chip specification',
      requiresArg: true,
      coerce: enforceUnique,
    },
    parse: {
      alias: 'p',
      describe: 'Parse the HDL file, and print AST',
    },
    list: {
      alias: 'l',
      describe: 'List supported built-in gates',
    },
    gate: {
      alias: 'g',
      describe: 'Name of a built-in gate',
      requiresArg: true,
      coerce: enforceUnique,
    },
    describe: {
      alias: 'd',
      describe: 'Prints gate\'s specification',
    },
    'exec-on-data': {
      alias: 'e',
      describe: 'Evaluates gate\'s logic on passed data; ' +
        'validates outputs if passed',
      requiresArg: true,
      coerce: enforceUnique,
    },
  })
  .alias('help', 'h')
  .alias('version', 'v')
  .argv;

/**
 * Directory with all built-in gates.
 */
const BUILTINS_DIR = __dirname + '/../src/emulator/hardware/builtin-gates';

/**
 * Lists built-in gates.
 */
function listBuiltInGates() {
  const builtinGates = fs.readdirSync(BUILTINS_DIR)
    .filter(file => /^[A-Z]/.test(file))
    .map(file => '  - ' + path.basename(file, '.js'));

  console.info('');
  console.info(colors.bold('Built-in gates:'));
  console.info('');
  console.info(builtinGates.join('\n'), '\n');
}

/**
 * Loads built-in gate class.
 */
function loadBuiltInGate(name) {
  try {
    return require(BUILTINS_DIR + '/' + name);
  } catch (_e) {
    console.error(colors.red(`\nUnknown gate: "${name}".`));
    listBuiltInGates();
    process.exit(1);
  }
}

function main() {
  const {
    file,
    gate,
    parse,
    list,
    describe,
    execOnData,
  } = options;

  if (gate && !describe && !execOnData) {
    console.info(
      `\nHint: pass ${colors.bold('--describe')} option to see ` +
      `${colors.bold('"' + gate + '"')} gate specification.\n`
    );
  }

  if (describe && !gate && !file) {
    console.info(
      `\nHint: pass ${colors.bold('--gate')} or ${colors.bold('--file')} ` +
      `option to see the specification of a built-in or custom gate.\n`
    );
  }

  // HDL file to be parsed.
  let hdlFile;

  // ------------------------------------------------------
  // Custom HDL file.

  if (file) {
    hdlFile = fs.readFileSync(file, 'utf-8');
  }

  // ------------------------------------------------------
  // List built-in gates.

  if (list) {
    listBuiltInGates();
  }

  // ------------------------------------------------------
  // Describes a gate (built-in or composite).

  if (gate && describe) {
    // Handle only built-in gates.
    // TODO: support user-defined composite gates from HDL.

    const GateClass = loadBuiltInGate(gate);
    const spec = GateClass.Spec;

    console.info('');
    console.info(colors.bold(`"${GateClass.name}"`) + ' gate:');

    const toFullName = (name) => {
      return name = typeof name === 'string'
        ? `  - ${name}`
        : `  - ${name.name}[${name.size}]`;
    };

    // Description:

    const description = spec.description.split('\n')
      .map(line => '  ' + line)
      .join('\n')

    console.info('\n' + colors.bold('Description:\n\n') + description);

    // Input pins:

    const inputPins = spec.inputPins
      .map(input => toFullName(input))
      .join('\n');

    console.info('\n' + colors.bold('Inputs:\n\n') + inputPins);

    // Output pins:

    const outputPins = spec.outputPins
      .map(output => toFullName(output))
      .join('\n');

    console.info('\n' + colors.bold('Outputs:\n\n') + outputPins);
    console.info('');

    // Truth table:
    console.info(colors.bold('Truth table:'), '\n');
    GateClass.printTruthTable();
  }

  // ------------------------------------------------------
  // Exec on data.

  if (execOnData) {
    if (!gate && !file) {
      console.info(
        `\nHint: pass ${colors.bold('--gate')} or ${colors.bold('--file')} ` +
        `option to execute gate logic on the passed data.\n`
      );
      return;
    }
    const GateClass = loadBuiltInGate(gate);
    const gateInstance = GateClass.defaultFromSpec();
    const data = JSON.parse(execOnData);

    const {result, conflicts} = gateInstance.execOnData(data);
    const conflictingRows = {};

    if (conflicts.length) {
      console.info(
        colors.red(colors.bold(
          `\nFound ${conflicts.length} conflicts in:\n`
        ))
      );

      conflicts.forEach(conflict => {
        const {row, pins} = conflict;
        const pinNames = Object.keys(pins);

        conflictingRows[row] = pins;

        console.info(`  - row: ${row}, pins: ${pinNames.join(', ')}`, '\n');
      });

    } else {
      // No conflicts.
      console.info(colors.bold('\nTruth table for data:'), '\n');
    }

    // Always print correct table eventually,
    // showing conflicting values in red.
    GateClass.printTruthTable({
      table: result,
      transformValue(value, row, column) {
        if (
          conflictingRows[row] &&
          conflictingRows[row].hasOwnProperty(column)
        ) {
          return colors.red(data[row][column]) + ' / ' + colors.green(value);
        }
        return value;
      }
    });
  }

  // ------------------------------------------------------
  // Parser.

  if (parse && hdlFile) {
    const parsed = hdl.parse(hdlFile);
    console.info('');
    console.info(colors.bold('Parsed:'));
    console.info('');
    console.info(JSON.stringify(parsed, null, 2), '\n');
    return;
  }
}

if (require.main === module) {
  main();
}