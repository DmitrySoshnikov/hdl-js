/**
 * The MIT License (MIT)
 * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>
 */

const generator = require('..');
const parser = require('../../parser');
const HDLClassFactory = require('../../emulator/hardware/HDLClassFactory');

describe('generator-from-ast', () => {

  it('basic chip', () => {
    const originalHDL = [
      'CHIP Custom {',
      '  IN a, b[4];',
      '  OUT out[8], out2;',
      '',
      '  PARTS:',
      '',
      '  Nand(a=a, b=b[1], out[3]=n);',
      '  MyGate(a[0..7]=a[1], b=b[8..15], out[3]=n);',
      '  Const(a=1, b=0, c=true, d=false, e=15, out[3]=n);',
      '',
      '  BUILTIN Nand, MyGate;',
      '',
      '  CLOCKED a, out2;',
      '}',
    ].join('\n');

    const ast = parser.parse(originalHDL);

    const generatedHDL = generator.fromAST(ast);
    const astFromGenerated = parser.parse(generatedHDL);

    // Check ASTs are equivalent:
    expect(ast).toEqual(astFromGenerated);

    const expectedHDL =  [
      `/**`,
      ` * Automatically generated by hdl-js "Custom" gate.`,
      ` */`,
      originalHDL,
    ].join('\n');

    expect(generatedHDL).toEqual(expectedHDL);
  });

  it('from custom AST', () => {
    const ast = {
      type: 'Chip',
      name: 'And',
      inputs: [
        {type: 'Name', value: 'a'},
        {type: 'Name', value: 'b'},
      ],
      outputs: [
        {type: 'Name', value: 'out'},
      ],
      builtins: [
        {type: 'Name', value: 'And'},
      ]
    };

    const hdl = generator.fromAST(ast);

    const parsed = parser.parse(hdl);
    expect(Object.assign({}, ast, {clocked: [], parts: []})).toEqual(parsed);

    const expectedHDL =  [
      `/**`,
      ` * Automatically generated by hdl-js "And" gate.`,
      ` */`,
      `CHIP And {`,
      `  IN a, b;`,
      `  OUT out;`,
      ``,
      `  BUILTIN And;`,
      `}`
    ].join('\n');

    expect(hdl).toEqual(expectedHDL);
  });

  it('from CompositeGate instance', () => {
    const originalHDL = [
      'CHIP Custom {',
      '  IN a, b[4];',
      '  OUT out[8], out2;',
      '',
      '  PARTS:',
      '',
      '  Nand(a=a, b=b[1], out[3]=n);',
      '  And(a=a[1], b=b[2], out=out2);',
      '}',
    ].join('\n');

    const gate = HDLClassFactory
      .fromHDL(originalHDL)
      .defaultFromSpec();

    const expectedHDL =  [
      `/**`,
      ` * Automatically generated by hdl-js "Custom" gate.`,
      ` */`,
      originalHDL,
    ].join('\n');

    const generatedHDL = generator.fromCompositeGate(gate);
    expect(generatedHDL).toEqual(expectedHDL);
  });

});